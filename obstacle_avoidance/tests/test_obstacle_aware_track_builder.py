from .. import geometric_primitives as gp
from .. import obstacles as obstcl
from .. import obstacle_aware_track_builder as oatb

import math
import numpy as np
import pytest


TEST_CENTRAL_PATH_1 = [
    [1, 1],
    [3, 2],
    [4, 4],
    [7, 5],
    [8, 8],
    [10, 8],
    [10, 6],
    [9, 3],
    [8, 1],
]


def add_extra_points(central_path, extra_points_number):
    result = [central_path[0]]
    for i in range(1, len(central_path)):
        coef = 1 / (extra_points_number + 1)
        for k in range(1, extra_points_number + 2):
            x_diff = central_path[i][0] - central_path[i - 1][0]
            y_diff = central_path[i][1] - central_path[i - 1][1]
            result.append(
                [
                    central_path[i - 1][0] + k * coef * x_diff,
                    central_path[i - 1][1] + k * coef * y_diff,
                ]
            )
    return result


@pytest.mark.parametrize(
    'central_path, track_builder, distance_to_path_bound, minimal_gap_width, extra_points_number, expected_result',
    [
        (TEST_CENTRAL_PATH_1, oatb.ObstacleAwareTrackBuilder([]), 1, 0.25, 0, TEST_CENTRAL_PATH_1),
        (TEST_CENTRAL_PATH_1, oatb.ObstacleAwareTrackBuilder([]), 1, 0.5, 0, TEST_CENTRAL_PATH_1),
        (TEST_CENTRAL_PATH_1, oatb.ObstacleAwareTrackBuilder([]), 1, 0.5, 1, add_extra_points(TEST_CENTRAL_PATH_1, 1)),
        (TEST_CENTRAL_PATH_1, oatb.ObstacleAwareTrackBuilder([]), 1, 0.5, 5, add_extra_points(TEST_CENTRAL_PATH_1, 5)),
    ]
)
def test_no_obstacles(
    central_path,
    track_builder,
    distance_to_path_bound,
    minimal_gap_width,
    extra_points_number,
    expected_result,
):
    new_central_path, new_distance_to_path_bound = track_builder.rebuild_central_path(
        central_path=central_path,
        distance_to_path_bound=distance_to_path_bound,
        minimal_gap_width=minimal_gap_width,
        extra_points_number=extra_points_number,
    )
    assert np.allclose(new_central_path, expected_result, atol=gp.EPS)
    assert math.fabs(new_distance_to_path_bound - distance_to_path_bound) < gp.EPS


@pytest.mark.parametrize(
    'central_path, track_builder, distance_to_path_bound, minimal_gap_width, extra_points_number',
    [
        (TEST_CENTRAL_PATH_1, oatb.ObstacleAwareTrackBuilder([]), 1, 3, 0),
        (TEST_CENTRAL_PATH_1, oatb.ObstacleAwareTrackBuilder([]), 1, 3, 5),
    ]
)
def test_infeasible_path_without_obstacles(
    central_path,
    track_builder,
    distance_to_path_bound,
    minimal_gap_width,
    extra_points_number,
):
    new_central_path, new_distance_to_path_bound = track_builder.rebuild_central_path(
        central_path=central_path,
        distance_to_path_bound=distance_to_path_bound,
        minimal_gap_width=minimal_gap_width,
        extra_points_number=extra_points_number,
    )
    assert np.all(np.isnan(new_central_path))
    assert math.fabs(new_distance_to_path_bound) < gp.EPS


@pytest.mark.parametrize(
    'central_path, track_builder, is_rectangularized, distance_to_path_bound, minimal_gap_width, extra_points_number, expected_result, expected_distance_to_bound',
    [
        (
            TEST_CENTRAL_PATH_1,
            oatb.ObstacleAwareTrackBuilder(
                [
                    obstcl.CircleObstacle(gp.Point(3, 2), 0.5),
                    obstcl.CircleObstacle(gp.Point(4, 4), 0.5),
                    obstcl.CircleObstacle(gp.Point(7, 5), 0.5),
                    obstcl.CircleObstacle(gp.Point(8, 8), 0.5),
                    obstcl.CircleObstacle(gp.Point(10, 8), 0.5),
                    obstcl.CircleObstacle(gp.Point(10, 6), 0.5),
                    obstcl.CircleObstacle(gp.Point(9, 3), 0.5),
                    obstcl.CircleObstacle(gp.Point(8, 1), 0.5),
                ]
            ),
            False,
            1,
            0.25,
            0,
            [
                [1, 1],
                [2.66459, 2.6708205],
                [3.3291795, 4.33541 ],
                [6.7628293, 5.7115126],
                [7.2884874, 8.237171],
                [10, 8.75],
                [10.75, 6],
                [9.711513, 2.762829 ],
                [8.67082, 0.6645898],
            ],
            0.25,
        ),
        (
            TEST_CENTRAL_PATH_1,
            oatb.ObstacleAwareTrackBuilder(
                [
                    obstcl.CircleObstacle(gp.Point(3, 2), 0.5),
                    obstcl.CircleObstacle(gp.Point(4, 4), 0.5),
                    obstcl.CircleObstacle(gp.Point(7, 5), 0.5),
                    obstcl.CircleObstacle(gp.Point(8, 8), 0.5),
                    obstcl.CircleObstacle(gp.Point(10, 8), 0.5),
                    obstcl.CircleObstacle(gp.Point(10, 6), 0.5),
                    obstcl.CircleObstacle(gp.Point(9, 3), 0.5),
                    obstcl.CircleObstacle(gp.Point(8, 1), 0.5),
                ]
            ),
            False,
            1,
            0.25,
            10,
            [
                [1, 1],
                [1.1818181, 1.0909091],
                [1.3636364, 1.1818181],
                [1.5454545, 1.2727273],
                [1.7272727, 1.3636364],
                [1.9090909, 1.4545455],
                [2.090909, 1.5454545],
                [2.2727273, 1.6363636],
                [2.4545455, 1.7272727],
                [2.3476758, 2.3955574],
                [2.4924285, 2.5605972],
                [2.66459, 2.6708205],
                [2.4394028, 2.5075715],
                [2.6044426, 2.6523242],
                [3.2727273, 2.5454545],
                [3.3636363, 2.7272727],
                [3.4545455, 2.909091],
                [3.5454545, 3.090909],
                [3.6363637, 3.2727273],
                [3.7272727, 3.4545455],
                [3.240806, 3.9250515],
                [3.2575846, 4.143935],
                [3.3291795, 4.33541],
                [4.0499306, 4.7592998],
                [4.5454545, 4.181818],
                [4.818182, 4.2727275],
                [5.090909,   4.3636365],
                [5.3636365, 4.4545455],
                [5.6363635, 4.5454545],
                [5.909091, 4.6363635],
                [6.181818, 4.7272725],
                [6.4545455, 4.818182],
                [6.504476, 5.5774813],
                [6.7628293, 5.7115126],
                [6.4225187, 5.495524],
                [7.181818, 5.5454545],
                [7.2727275, 5.818182],
                [7.3636365, 6.090909],
                [7.4545455, 6.3636365],
                [7.5454545, 6.6363635],
                [7.6363635, 6.909091],
                [7.7272725, 7.181818],
                [7.818182, 7.4545455],
                [7.2407002, 7.9500694],
                [7.2884874, 8.237171],
                [8.181818, 8.732885],
                [8.363636, 8.671587],
                [8.545455, 8],
                [8.727273, 8],
                [8.909091, 8],
                [9.090909, 8],
                [9.272727, 8],
                [9.454545, 8],
                [9.636364, 8.671587],
                [9.818182, 8.732885],
                [10, 8.75],
                [10.732885, 7.818182 ],
                [10.671587, 7.6363635],
                [10, 7.4545455],
                [10, 7.2727275],
                [10, 7.090909],
                [10, 6.909091],
                [10, 6.7272725],
                [10, 6.5454545],
                [10.671587, 6.3636365],
                [10.732885, 6.181818],
                [10.75, 6],
                [10.577481, 5.504476 ],
                [9.818182, 5.4545455],
                [9.727273, 5.181818],
                [9.636364, 4.909091],
                [9.545455, 4.6363635],
                [9.454545, 4.3636365],
                [9.363636, 4.090909],
                [9.272727, 3.8181818],
                [9.181818, 3.5454545],
                [9.759299, 3.0499303],
                [9.711513, 2.762829],
                [9.560597, 2.4924285],
                [9.395557, 2.3476758],
                [8.727273, 2.4545455],
                [8.636364, 2.2727273],
                [8.545455, 2.090909],
                [8.454545, 1.9090909],
                [8.363636, 1.7272727],
                [8.272727, 1.5454545],
                [8.759193, 1.0749485],
                [8.742415, 0.856065],
                [8.67082, 0.6645898],
            ],
            0.25,
        ),
        (
            TEST_CENTRAL_PATH_1,
            oatb.ObstacleAwareTrackBuilder(
                [
                    obstcl.CircleObstacle(gp.Point(3.5, 1.5), 0.5),
                ]
            ),
            False,
            1,
            0.25,
            0,
            [
                [1, 1],
                [2.8263931, 2.3472135],
                [4, 4],
                [7, 5],
                [8, 8],
                [10, 8],
                [10, 6],
                [9, 3],
                [8, 1],
            ],
            0.611803,
        ),
        (
            [
                [93.551119, 930.674272],
                [98.643056, 930.454717],
                [103.764977, 929.484079],
                [108.763165, 928.627825],
                [113.599154, 928.591245],
                [118.321793, 929.940244],
            ],
            oatb.ObstacleAwareTrackBuilder(
                [
                    obstcl.CircleObstacle(gp.Point(101, 927), 1.5),
                    obstcl.CircleObstacle(gp.Point(110, 931), 1.5),
                ]
            ),
            True,
            4,  # 4m
            2,  # 2m
            50,
            [
                [ 93.55112,  930.67426 ],
                [ 93.65096,  930.67    ],
                [ 93.7508,   930.66565 ],
                [ 93.85065,  930.6614  ],
                [ 93.950485, 930.65704 ],
                [ 94.05033,  930.6528  ],
                [ 94.15017,  930.64844 ],
                [ 94.250015, 930.64417 ],
                [ 94.34985,  930.63983 ],
                [ 94.4497,   930.6355  ],
                [ 94.54954,  930.6312  ],
                [ 94.64938,  930.6269  ],
                [ 94.74922,  930.6226  ],
                [ 94.84906,  930.6183  ],
                [ 94.948906, 930.614   ],
                [ 95.048744, 930.6097  ],
                [ 95.14859,  930.6054  ],
                [ 95.24843,  930.6011  ],
                [ 95.348274, 930.5968  ],
                [ 95.44811,  930.59247 ],
                [ 95.54796,  930.5882  ],
                [ 95.6478,  930.58386 ],
                [ 95.74764,  930.5796  ],
                [ 95.84748,  930.57526 ],
                [ 95.94733,  930.5709  ],
                [ 96.047165, 930.56665 ],
                [ 96.14701,  930.5623  ],
                [ 96.24685,  930.55804 ],
                [ 96.346695, 930.5537  ],
                [ 96.44653,  930.54944 ],
                [ 96.54638,  930.5451  ],
                [ 96.64622,  930.54083 ],
                [ 96.74606,  930.5365  ],
                [ 96.8459,  930.5322  ],
                [ 96.94575,  930.5279  ],
                [ 97.045586, 930.5236  ],
                [ 97.145424, 930.5193  ],
                [ 97.24527,  930.515   ],
                [ 97.34511,  930.5107  ],
                [ 97.444954, 930.50635 ],
                [ 97.54479,  930.5021  ],
                [ 97.64464,  930.49774 ],
                [ 97.74448,  930.49347 ],
                [ 97.84432,  930.48914 ],
                [ 97.94416,  930.48486 ],
                [ 98.04401,  930.4805  ],
                [ 98.143845, 930.47626 ],
                [ 98.24369,  930.4719  ],
                [ 98.34353,  930.46765 ],
                [ 98.443375, 930.4633  ],
                [ 98.54321,  930.45905 ],
                [ 98.64306,  930.4547  ],
                [ 98.743484, 930.43567 ],
                [ 98.84392,  930.4166  ],
                [ 98.94434,  930.39764 ],
                [ 99.04478,  930.3786  ],
                [ 99.1452,   930.35956 ],
                [ 99.245636, 930.3405  ],
                [ 99.34606,  930.3215  ],
                [ 99.446495, 930.3025  ],
                [ 99.54692,  930.28345 ],
                [ 99.647354, 930.2644  ],
                [ 99.74779,  930.24536 ],
                [ 99.84821,  930.2263  ],
                [ 99.94865,  930.2073  ],
                [100.04907,  930.1883  ],
                [100.38639,  931.41925 ],
                [100.486824, 931.4002  ],
                [100.58725,  931.38116 ],
                [100.68768,  931.3622  ],
                [100.78811,  931.34314 ],
                [100.88854,  931.3241  ],
                [100.98897,  931.30505 ],
                [101.0894,   931.286   ],
                [101.18983,  931.267   ],
                [101.29026,  931.248   ],
                [101.390686, 931.22894 ],
                [101.49112,  931.2099  ],
                [101.591545, 931.19086 ],
                [101.69198,  931.1718  ],
                [101.79241,  931.15283 ],
                [101.89284,  931.1338  ],
                [101.99327,  931.11475 ],
                [102.0937,   931.0957  ],
                [102.19413,  931.07666 ],
                [102.294556, 931.0576  ],
                [102.39499,  931.03864 ],
                [102.495415, 931.0196  ],
                [102.59585,  931.00055 ],
                [102.69627,  930.9815  ],
                [102.79671,  930.96246 ],
                [102.89713,  930.9435  ],
                [102.99757,  930.92444 ],
                [103.098,    930.9054  ],
                [103.198425, 930.88635 ],
                [103.061966, 929.6173  ],
                [103.1624,   929.59827 ],
                [103.262825, 929.5792  ],
                [103.36326,  929.5602  ],
                [103.463684, 929.5412  ],
                [103.56412,  929.52216 ],
                [103.66455,  929.5031  ],
                [103.76498,  929.4841  ],
                [103.86298,  929.4673  ],
                [103.96098,  929.4505  ],
                [104.05899,  929.4337  ],
                [104.15699,  929.41693 ],
                [104.255,    929.40015 ],
                [104.353,    929.38336 ],
                [104.451004, 929.3666  ],
                [104.549,    929.3498  ],
                [104.64701,  929.33295 ],
                [104.74501,  929.31616 ],
                [104.84302,  929.2994  ],
                [104.941025, 929.2826  ],
                [105.039024, 929.2658  ],
                [105.13703,  929.249   ],
                [105.23503,  929.23224 ],
                [105.33304,  929.21545 ],
                [105.43104,  929.19867 ],
                [105.529045, 929.1819  ],
                [105.627045, 929.1651  ],
                [105.72505,  929.1483  ],
                [105.82305,  929.13153 ],
                [105.92106,  929.1147  ],
                [106.01906,  929.0979  ],
                [106.117065, 929.0811  ],
                [106.21507,  929.06433 ],
                [106.31307,  929.04755 ],
                [106.41108,  929.03076 ],
                [106.50908,  929.014   ],
                [106.607086, 928.9972  ],
                [106.705086, 928.9804  ],
                [106.80309,  928.9636  ],
                [106.90109,  928.94684 ],
                [106.9991,   928.93005 ],
                [107.0971,   928.91327 ],
                [107.19511,  928.8964  ],
                [107.293106, 928.87964 ],
                [107.39111,  928.86285 ],
                [107.48912,  928.84607 ],
                [107.58712,  928.8293  ],
                [107.68513,  928.8125  ],
                [107.78313,  928.7957  ],
                [107.881134, 928.77893 ],
                [107.97913,  928.76215 ],
                [108.07714,  928.74536 ],
                [108.01047,  927.76733 ],
                [108.08965,  927.6406  ],
                [108.174355, 927.54626 ],
                [108.26194,  927.4686  ],
                [108.351425, 927.4021  ],
                [108.44233,  927.3439  ],
                [108.53436,  927.29224 ],
                [108.848114, 927.3212  ],
                [108.942566, 927.27155 ],
                [109.03708,  927.22974 ],
                [109.13164,  927.1942  ],
                [109.226234, 927.164   ],
                [109.32087,  927.13837 ],
                [109.415535, 927.1168  ],
                [109.51023,  927.09906 ],
                [109.60495,  927.0847  ],
                [109.6997,   927.0737  ],
                [109.794464, 927.06586 ],
                [109.88926,  927.0611  ],
                [109.98408,  927.0593  ],
                [110.07891,  927.06055 ],
                [110.173775, 927.06476 ],
                [110.268654, 927.0721  ],
                [110.36356,  927.08264 ],
                [110.458496, 927.0965  ],
                [110.55346,  927.1139  ],
                [110.64845,  927.13513 ],
                [110.74347,  927.16064 ],
                [110.83853,  927.1909  ],
                [110.933624, 927.2267  ],
                [111.02878,  927.2692  ],
                [111.12399,  927.3202  ],
                [111.21929,  927.3828  ],
                [111.314735, 927.4636  ],
                [111.41046,  927.5822  ],
                [111.51304,  928.607   ],
                [111.607864, 928.6063  ],
                [111.70269,  928.6056  ],
                [111.79751,  928.60486 ],
                [111.892334, 928.6041  ],
                [111.98716,  928.60345 ],
                [112.08198,  928.6027  ],
                [112.1768,   928.602   ],
                [112.27163,  928.60126 ],
                [112.36645,  928.6006  ],
                [112.46127,  928.59985 ],
                [112.5561,   928.5991  ],
                [112.65092,  928.5984  ],
                [112.74574,  928.5977  ],
                [112.84057,  928.597   ],
                [112.935394, 928.59625 ],
                [113.03021,  928.5955  ],
                [113.12504,  928.59485 ],
                [113.219864, 928.5941  ],
                [113.31468,  928.5934  ],
                [113.40951,  928.59265 ],
                [113.50433,  928.592   ],
                [113.59915,  928.59125 ],
                [113.69176,  928.6177  ],
                [113.784355, 928.64417 ],
                [113.87695,  928.6706  ],
                [113.96956,  928.697   ],
                [114.06216,  928.7235  ],
                [114.15476,  928.74994 ],
                [114.24736,  928.7764  ],
                [114.33996,  928.80286 ],
                [114.43256,  928.8293  ],
                [114.52516,  928.8558  ],
                [114.61776,  928.8822  ],
                [114.710365, 928.9086  ],
                [114.80296,  928.9351  ],
                [114.89556,  928.96155 ],
                [114.98817,  928.98804 ],
                [115.080765, 929.01447 ],
                [115.17337,  929.0409  ],
                [115.26597,  929.0674  ],
                [115.35857,  929.0938  ],
                [115.45117,  929.12024 ],
                [115.54377,  929.1467  ],
                [115.63637,  929.17316 ],
                [115.72897,  929.19965 ],
                [115.82157,  929.2261  ],
                [115.91417,  929.2525  ],
                [116.006775, 929.279   ],
                [116.09937,  929.3054  ],
                [116.19198,  929.33185 ],
                [116.28458,  929.35834 ],
                [116.377174, 929.38477 ],
                [116.46978,  929.41125 ],
                [116.56238,  929.4377  ],
                [116.654976, 929.4641  ],
                [116.74758,  929.4906  ],
                [116.84018,  929.517   ],
                [116.932785, 929.54346 ],
                [117.02538,  929.56995 ],
                [117.11798,  929.5964  ],
                [117.21059,  929.6228  ],
                [117.303185, 929.6493  ],
                [117.39578,  929.6757  ],
                [117.48839,  929.7022  ],
                [117.580986, 929.72864 ],
                [117.673584, 929.75507 ],
                [117.76619,  929.78156 ],
                [117.85879,  929.808   ],
                [117.95139,  929.8344  ],
                [118.04399,  929.8609  ],
                [118.13659,  929.8873  ],
                [118.229195, 929.9138  ],
                [118.32179,  929.94025 ],
            ],
            2.44076089,
        )
    ]
)
def test_feasible_with_obstacles(
    central_path,
    track_builder,
    is_rectangularized,
    distance_to_path_bound,
    minimal_gap_width,
    extra_points_number,
    expected_result,
    expected_distance_to_bound,
):
    new_central_path, new_distance_to_path_bound = track_builder.rebuild_central_path(
        central_path=central_path,
        distance_to_path_bound=distance_to_path_bound,
        minimal_gap_width=minimal_gap_width,
        extra_points_number=extra_points_number,
        is_rectangularized=is_rectangularized,
    )
    assert np.allclose(new_central_path, expected_result, atol=gp.EPS)
    assert math.fabs(new_distance_to_path_bound - expected_distance_to_bound) < gp.EPS


# test safe distance from obstacle
# test path optimization after obstacle avoidance
# test with is_rectangularized